version: "3.9"
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: your-dockerhub/laravel-app:latest   # or leave unpushed; Coolify can build from repo
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      APP_URL: ${APP_URL}
      APP_KEY: ${APP_KEY}
      DB_CONNECTION: mysql
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT:-3306}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
    depends_on:
      - redis
    restart: unless-stopped

  web:
    image: nginx:alpine
    depends_on:
      - app
    volumes:
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"     # Coolify/Traefik will map your domain to this service; port exposed internally
    restart: unless-stopped
    # In Coolify, set this as the "main service" and attach your domain here.

  # optional managed DB on Hostinger is better; but you can use a local one:
  # db:
  #   image: mysql:8
  #   environment:
  #     MYSQL_DATABASE: ${DB_DATABASE}
  #     MYSQL_USER: ${DB_USERNAME}
  #     MYSQL_PASSWORD: ${DB_PASSWORD}
  #     MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
  #   volumes:
  #     - db_data:/var/lib/mysql
  #   restart: unless-stopped

  redis:
    image: redis:7-alpine
    restart: unless-stopped

  queue:
    build:
      context: .
      dockerfile: Dockerfile
    command: php artisan queue:work --verbose --tries=3 --timeout=120
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      APP_URL: ${APP_URL}
      APP_KEY: ${APP_KEY}
      DB_CONNECTION: mysql
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT:-3306}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      QUEUE_CONNECTION: redis
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
    depends_on:
      - app
      - redis
    restart: unless-stopped

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    command: php artisan schedule:work
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      APP_URL: ${APP_URL}
      APP_KEY: ${APP_KEY}
      DB_CONNECTION: mysql
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT:-3306}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      QUEUE_CONNECTION: redis
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
    depends_on:
      - app
      - redis
    restart: unless-stopped

# volumes:
#   db_data:
